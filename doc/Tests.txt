truffle test .\test\erc20.test.js --compile-none
truffle test .\test\Voting.test.js --compile-none


truffle test .\test\Voting.test.js -g "Voting_03-Ownable" --compile-none 
truffle test .\test\Voting.test.js -g "Voting_03-Admin" --compile-none
truffle test .\test\Voting.test.js -g "Voting_03-Voting" --compile-none
truffle test .\test\Voting.test.js -g "Voting_03-Voting_03-Transitions" --compile-none
truffle test .\test\Voting.test.js -g "Voting_03-Voting_03-Fonctionnement" --compile-none



describe('Serie 01 - 03 : Voting_03-Voting_03', function()
{
  // --------------------
  // Transitions
  // --------------------
  describe('Serie 01 - 03 - 01 : Voting_03-Voting_03-Transitions', function()
  {
    contract('Voting_03-Voting_03-Transitions', function (accounts)
    {
      // Etat initial
      it("Voting_03-Voting_03-Transitions : Initial state should be 'registering voters'", async () =>
      {
        currentStatus = await this.contract_Voting_03_Instance._workflowStatus();
        expectedStatus = new BN( WorkflowStatus_RegisteringVoters );
        // console.log(currentStatus);
        // console.log(expectedStatus);
        // expect( currentStatus ).to.equal( expectedStatus );
        expect(currentStatus).to.be.a.bignumber.that.equals(expectedStatus);
      });

      // Vérification de transition interdite de "Enregistrement des votants" à "Fin d'enregistrement des propositions"
      it("Voting_03-Voting_03-Transitions : Transition forbidden : Should not switch to state 'EndProposalsRegistration'", async () =>
      {

        await expectRevert
        (
          this.contract_Voting_03_Instance.setStateEndProposalsRegistration( {from: account_00_initial_owner_contract_Voting_03 } )
          , "Not in 'ProposalsRegistrationStarted' state. -- Reason given: Not in 'ProposalsRegistrationStarted' state.." 
        );
        currentStatus = await this.contract_Voting_03_Instance._workflowStatus();
        expectedStatus = new BN( WorkflowStatus_RegisteringVoters );
        // console.log(currentStatus);
        // console.log(expectedStatus);
        // expect( currentStatus ).to.equal( expectedStatus );
        expect(currentStatus).to.be.a.bignumber.that.equals(expectedStatus);
      });
      
      // Passage de "Enregistrement des votants" à "Ouverture d'enregistrement des Propositions"
      it("Voting_03-Voting_03-Transitions : Should transition to 'ProposalsRegistrationStarted'", async () =>
      {
        await this.contract_Voting_03_Instance.setStateStartProposalsRegistration( {from: account_00_initial_owner_contract_Voting_03 } )
        currentStatus = await this.contract_Voting_03_Instance._workflowStatus();
        expectedStatus = new BN( WorkflowStatus_ProposalsRegistrationStarted );
        // console.log(currentStatus);
        // console.log(expectedStatus);
        // expect( currentStatus ).to.equal( expectedStatus );
        expect(currentStatus).to.be.a.bignumber.that.equals(expectedStatus);
    
      });
    
      // Passage de "Ouverture d'enregistrement des Propositions" à "Fin d'enregistrement des propositions"
      it("Voting_03-Voting_03-Transitions : Should transition to 'ndProposalsRegistration'", async () =>
      {
        await this.contract_Voting_03_Instance.setStateEndProposalsRegistration( {from: account_00_initial_owner_contract_Voting_03 } )
        currentStatus = await this.contract_Voting_03_Instance._workflowStatus();
        expectedStatus = new BN( WorkflowStatus_ProposalsRegistrationEnded );
        // console.log(currentStatus);
        // console.log(expectedStatus);
        // expect( currentStatus ).to.equal( expectedStatus );
        expect(currentStatus).to.be.a.bignumber.that.equals(expectedStatus);
      });

      // Passage de "Fin d'enregistrement des propositions" à "Ouverture des votes"
      it("Voting_03-Voting_03-Transitions : Should transition to 'StartVotingSession'", async () =>
      {
        await this.contract_Voting_03_Instance.setStateStartVotingSession( {from: account_00_initial_owner_contract_Voting_03 } )
        currentStatus = await this.contract_Voting_03_Instance._workflowStatus();
        expectedStatus = new BN( WorkflowStatus_VotingSessionStarted );
        // console.log(currentStatus);
        // console.log(expectedStatus);
        // expect( currentStatus ).to.equal( expectedStatus );
        expect(currentStatus).to.be.a.bignumber.that.equals(expectedStatus);
      });

      // Passage de "Ouverture des votes" à "Fermeture des votes"
      it("Voting_03-Voting_03-Transitions : Should transition to 'EndVotingSession'", async () =>
      {
        await this.contract_Voting_03_Instance.setStateEndVotingSession( {from: account_00_initial_owner_contract_Voting_03 } )
        currentStatus = await this.contract_Voting_03_Instance._workflowStatus();
        expectedStatus = new BN( WorkflowStatus_VotingSessionEnded );
        // console.log(currentStatus);
        // console.log(expectedStatus);
        // expect( currentStatus ).to.equal( expectedStatus );
        expect(currentStatus).to.be.a.bignumber.that.equals(expectedStatus);
      });


      // countVotes

    }); // contract('Voting_03'


  }); // describe Serie 01 - 03 - 01 : Voting_03 Transitions tests

  // ---------------------------------------------------------------

  describe('Serie 01 - 03 - 02 : Voting_03 tests', function()
  {

    contract('Voting_03 tests', function (accounts)
     {
        // const _name = 'ALYRA';
        // const _symbol = 'ALY';
        // const _initialsupply = new BN(1000);
        // const _decimals = new BN(18);

        const account_00 = accounts[0];
        const account_01 = accounts[1];
        const account_02 = accounts[2];
        const account_03 = accounts[3];
        const account_04 = accounts[4];
        const account_05 = accounts[5];

        const account_00_initial_owner_contract_Voting_03 = account_00;

        before(async () =>
        {
        this.contract_Voting_03_Instance = await Voting_03.new( {from: account_00_initial_owner_contract_Voting_03} );
        });
      /*
        beforeEach(async () =>
        {
          this.ERC20Instance = await ERC20.new(_initialsupply,{from: owner});
        });
      */
        it('Voting_03-Voting_03 : Contract is owned by account_00', async () =>
        {
          expect( await this.contract_Voting_03_Instance.owner() ).to.equal( account_00 );
        });


        it("Voting_03-Voting_03 : Whitelist account 01", async () =>
        {
          await this.contract_Voting_03_Instance.whitelist( account_01, {from: account_00_initial_owner_contract_Voting_03} );
          expect( await this.contract_Voting_03_Instance.isWhitelisted( account_01 ) ).to.be.true;
        });
        
        it("Voting_03-Voting_03 : Whitelist account 02", async () =>
        {
          await this.contract_Voting_03_Instance.whitelist( account_02, {from: account_00_initial_owner_contract_Voting_03} );
          expect( await this.contract_Voting_03_Instance.isWhitelisted( account_02 ) ).to.be.true;
        });

        it("Voting_03-Voting_03 : Whitelist account 03", async () =>
        {
          await this.contract_Voting_03_Instance.whitelist( account_03, {from: account_00_initial_owner_contract_Voting_03} );
          expect( await this.contract_Voting_03_Instance.isWhitelisted( account_03 ) ).to.be.true;
        });

        it("Voting_03-Voting_03 : Whitelist account 043", async () =>
        {
          await this.contract_Voting_03_Instance.whitelist( account_04, {from: account_00_initial_owner_contract_Voting_03} );
          expect( await this.contract_Voting_03_Instance.isWhitelisted( account_04 ) ).to.be.true;
        });

        it("Voting_03-Voting_03 : Accounts addresses 01-04 should be whitelisted", async () =>
        {
          res = await this.contract_Voting_03_Instance.getWhiteListedAddresses(  {from: account_05 } );
          expectedRes = [ account_01, account_02, account_03, account_04 ];
          // console.log(res);
          // console.log(expectedRes);
          expect( res ).to.have.members( expectedRes ) ;
        });


    
      }); // contract('Voting_03'


    }); // Serie 01 - 03 - 02 : Voting_03 tests
  }); // describe('Serie 01 - 03 : Voting_03 tests
// --------------------------------------------------------------------------------------------------------------
