{"version":3,"sources":["getWeb3.js","AppComponents-Status.js","consts.js","AppComponents-Admin.js","i18n.js","AppComponents-Header.js","AppComponents-Admin-Header.js","AppUtils.js","AppComponents-User.js","MainApp.js","serviceWorker.js","index.js"],"names":["toChecksumAddress","adr","Web3","utils","VoteStatusProgressStep","states","workflowStatus","t","useTranslation","aria-label","className","map","state","key","href","tabIndex","VoteStatusProgressBar","style","height","ProgressBar","striped","animated","min","max","now","label","bsPrefix","VoteStatusSimpleText","Alert","variant","Status","this","props","displayType","Component","StatusTranslated","withTranslation","Web3Loader","STATUSES_VALUES","Admin","handleOnClickWhithelistTitle","bind","whitelistOpened","setState","whitelistedAddresses","owner","display","justifyContent","Card","bg","border","width","Header","Button","onClick","Collapse","in","Body","Table","undefined","a","i","CONSTS","AdminInputNewAddressTranslated","handleWhitelistNewAddress","AdminInputNewAddress","getValidationState","handleOnNewAddressChange","isValidAddress","handleOnClickWhitelistNewAddress","handleOnClickClearNewAddress","validateAddress","validationState","e","newAddress","value","address","addressValue","target","length","isAddress","res","Form","Group","Control","type","id","placeholder","ref","input","onChange","maxLength","isValid","isInvalid","Footer","ListGroup","Item","ButtonGroup","disabled","AdminTranslated","i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","interpolation","escapeValue","react","useSuspense","wait","Toolbar","handleReload","connectedAccountAddr","changeLanguage","lng","role","size","ReloadButton","verticalAlign","substr","AdminToolbar","goToNextState","countAndTallyVotes","CountAndTallyVotesButton","NoMoreActionAvailable","GoToNextStateButton","zeroPad","num","places","zero","toString","Array","join","User","hasVoted","votedProposalId","allProposals","winningProposalId","onRegisterNewProposal","onVoteForProposal","whitelistedUser","indexOf","WhitelistedUserInterfaceWait","WhitelistedUserProposalsDisplayAndInput","WhitelistedUserProposalsDisplay","WhitelistedUserVoteForProposal","WhitelistedUserDisplayVoteProposal","NotWhitelistedUserDisplayVoteProposal","UnHandled","UserProposalsInput","useToggle","displayAllProposals","toggleDisplayAllProposals","checked","DisplayProposals","VoteForProposal","DisplayVoteProposal","NotWhitelistedUser","useState","newProposal","setnewProposal","displayNewProposalInput","setDisplayNewProposalInput","enableButtonSendNewProposal","setEnableButtonSendNewProposal","myProposals","filter","p","proposingAddr","proposalsMaxNumLen","Math","hideResetNewProposalInputs","resetToEmpty","useEffect","registerProposal","console","log","description","readOnly","contentEditable","minLength","v","displayedProposals","handleVoteForProposal","proposalId","initialValue","setValue","toggle","MainApp","web3","contractVoting","ethereum","handleAccountsChangedEvent","accounts","refreshContractVotingData","refreshUserAccount","get_workflowStatus","methods","_workflowStatus","call","val","workflowStatus_current_val","parseInt","setStateStartProposalsRegistration","send","from","setStateEndProposalsRegistration","setStateStartVotingSession","setStateEndVotingSession","workflowStatus_new","getWinningProposalId","alert","error","componentDidMount","Promise","resolve","reject","window","addEventListener","enable","provider","providers","HttpProvider","eth","getAccounts","connectedAccountsAddrs","net","getId","networkId","contractVoting_deployedNetwork","contractVotingImport","networks","contractInstanceVoting","Contract","abi","runInit","on","getWhiteListedAddresses","getAllProposals","whitelistNewAddress","whitelist","getUserVote","userVote","proposals","proposalsObjectsArray","proposal","voteCount","push","voteForProposal","vote","countVotes","getWinningProposal","MainAppTranslated","Boolean","location","hostname","match","ReactDOM","render","StrictMode","I18nextProvider","i18next","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.24ec4b90.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\n\nconst isAddress = (adr) => Web3.utils.isAddress(adr);\n\nconst toChecksumAddress = (adr) => Web3.utils.toChecksumAddress(adr)\n\n//export default getWeb3;\n\nexport  { getWeb3, isAddress, toChecksumAddress };\n","/* React */\nimport React, { Component } from \"react\";\n\n/* Traduction */\nimport { withTranslation, useTranslation } from 'react-i18next';\n\n\n/* React - Bootstrap*/\nimport ProgressBar from 'react-bootstrap/ProgressBar'\nimport Alert from 'react-bootstrap/Alert'\n\n\nfunction VoteStatusProgressStep({ states, workflowStatus })\n{\n  const { t } = useTranslation();\n  return (\n          <nav aria-label=\"{t('votingContract.app.dashboard.status.title')}\">\n                <ul className=\"pagination\">\n                { states !== null && states.map((state) => <li key={state} className={\"page-item \" + (state===workflowStatus?\"active\":\"disabled\")}><div className=\"page-link\" href=\"#\" tabIndex=\"\">{t(`votingContract.app.dashboard.status.states.${state}`)}</div></li> ) }\n                </ul>\n            </nav>\n  );\n}\n\nfunction VoteStatusProgressBar({ states, workflowStatus })\n {\n  const { t } = useTranslation();\n   return (\n    <div className=\"progressBar \"  style={{ height: 30 }} >\n\n        <ProgressBar style={{ height: 30 }}>\n          {\n            states !== null && states.map((state) => \n              <ProgressBar striped={state===workflowStatus} animated min={1} max={17} now={17} key={state} label={t(`votingContract.app.dashboard.status.states.${state}`)} bsPrefix={(state===workflowStatus?\"\":\"in\")+\"active-state-progressbar\"} /> )\n          }\n        </ProgressBar>\n    </div>\n    );\n }\n\nfunction VoteStatusSimpleText({ workflowStatus })\n{\n  const { t } = useTranslation();\n   return (\n            <Alert variant=\"primary\">\n              {t(`votingContract.app.dashboard.status.states.${workflowStatus}`)}\n            </Alert>\n    );\n }\n\n\nclass Status extends Component\n {\n\n  render()\n   {\n    const { t, displayType=\"ProgressBar\", workflowStatus, states } = this.props;\n\n    return (\n      <div className=\"row \">\n        <div className=\"col-sm-12 text-center\"><p className=\"text-primary fw-bold\">{t(\"votingContract.app.dashboard.status.title\")}</p>\n        {\n          { \"ProgressBar\": <VoteStatusProgressBar states={states} workflowStatus={ workflowStatus }/>,\n            \"ProgressStep\": <VoteStatusProgressStep states={states} workflowStatus={ workflowStatus }/>\n          }[displayType] || <VoteStatusSimpleText workflowStatus={ workflowStatus }/>\n        }\n        </div>\n      </div>\n    )\n  } // render()\n}\n\nconst StatusTranslated = withTranslation()(Status)\n\nfunction Web3Loader()\n{\n  return (\n  <div>\n    <table className=\"table table-bordered\">\n    <tbody>\n      <tr className='table-warning'>\n        <td className='warning'>\n          Loading Web3, accounts, and contract...\n        </td>\n      </tr>\n    </tbody>\n  </table>\n  </div>\n  )\n}\n\n\nexport { Web3Loader, StatusTranslated /* , Status, VoteStatusStep, VoteStatusProgress */ };\n","/* Statuses */\n\n/*\nconst status_RegisteringVoters = 0\nconst status_ProposalsRegistrationStarted = 1\nconst status_ProposalsRegistrationEnded = 2\nconst status_VotingSessionStarted = 3\nconst status_VotingSessionEnded = 4\nconst status_VotingSessionEnded = 5\n*/\n\n\n\nexport const STATUS_00_REGISTERINGVOTERS = \"status_RegisteringVoters\";\nexport const STATUS_01_PROPOSALSREGISTRATIONSTARTED = \"status_ProposalsRegistrationStarted\";\nexport const STATUS_02_PROPOSALSREGISTRATIONENDED = \"status_ProposalsRegistrationEnded\";\nexport const STATUS_03_VOTINGSESSIONSTARTED = \"status_VotingSessionStarted\";\nexport const STATUS_04_VOTINGSESSIONENDED = \"status_VotingSessionEnded\";\nexport const STATUS_05_VOTESTALLIED = \"status_VotesTallied\";\n\nexport const STATUSES_VALUES = {\n  STATUS_00_REGISTERINGVOTERS : 0,\n  STATUS_01_PROPOSALSREGISTRATIONSTARTED : 1,\n  STATUS_02_PROPOSALSREGISTRATIONENDED : 2,\n  STATUS_03_VOTINGSESSIONSTARTED : 3,\n  STATUS_04_VOTINGSESSIONENDED : 4,\n  STATUS_05_VOTESTALLIED : 5\n  }\n\n  //export { STATUSES_VALUES }","/* React */\nimport React, { Component } from \"react\";\nimport Collapse from 'react-bootstrap/Collapse'\n\n/* Web3 */\nimport { isAddress } from \"./getWeb3\";\n\n/* Traduction */\nimport { withTranslation /*, useTranslation */ } from 'react-i18next';\n\n/* React - Bootstrap*/\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport Table from 'react-bootstrap/Table';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\n\n\n/* Constantes */\nimport  * as CONSTS from \"./consts\";\n\n/* Icônes */\nimport { Check2, EraserFill, ArrowDownCircleFill, ArrowUpCircleFill } from 'react-bootstrap-icons';\n\n/* --------------------------------------------------------------------------------------- */\n\nclass Admin extends Component\n {\n  constructor(props)\n   {\n    super(props);\n    this.handleOnClickWhithelistTitle = this.handleOnClickWhithelistTitle.bind(this);\n     this.state = {\n      whitelistOpened : false\n    }\n   } // constructor\n\n  handleOnClickWhithelistTitle()\n  {\n    this.setState( { whitelistOpened: !this.state.whitelistOpened } )\n  }\n\n  render()\n  {\n    const { t, whitelistedAddresses, owner, workflowStatus } = this.props;\n\n    return (\n      <div>\n\n        <div>\n            <h2 className=\"text-center\">{t(\"votingContract.app.admin.title\")}</h2>\n            <hr></hr>\n            <br></br>\n        </div>\n\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card bg=\"dark\" border=\"light\" style={{ width: '50rem' }}>\n            <Card.Header className=\"text-dark\">\n              <Button variant=\"dark\" className=\"btn-outline-light\"\n                  onClick={() => this.handleOnClickWhithelistTitle() }>\n                  {t(\"votingContract.app.admin.whitelist.whitelistedAddresses\")} {this.state.whitelistOpened?<ArrowUpCircleFill/>:<ArrowDownCircleFill/>}\n              </Button>\n            </Card.Header>\n            <Collapse in={this.state.whitelistOpened}>\n              <Card.Body >\n                <Table className=\"table table-dark table-striped table-hover table-sm\">\n                      <thead className=\"table-dark\">\n                        <tr>\n                          <th>#</th>\n                          <th>@</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        { whitelistedAddresses !== null && whitelistedAddresses != undefined &&\n                          whitelistedAddresses.map((a,i) => <tr key={a}><td>{i+1}</td><td><p className={(a==owner?\"text-warning\":\"\") }>{a}</p></td></tr>)\n                        }\n                      </tbody>\n                  </Table>\n              </Card.Body>\n            </Collapse>\n          </Card>\n        </div>\n        <br></br>\n\n{ /*        <div>Admin : { JSON.stringify( this.props)  }</div> */ }\n         { /* Saisie des adresses seulement dans l'état enregistrement des votants */\n           workflowStatus === CONSTS.STATUSES_VALUES.STATUS_00_REGISTERINGVOTERS &&\n          <AdminInputNewAddressTranslated handleWhitelistNewAddress={this.props.handleWhitelistNewAddress}/>  }\n\n        <br></br>\n\n      </div>\n    );\n\n  } // render()\n} // class Admin extends Component\n\n/* --------------------------------------------------------------------------------------- */\n\nclass AdminInputNewAddress extends Component\n {\n  constructor(props)\n  {\n    super(props);\n\n    this.getValidationState = this.getValidationState.bind(this)\n    this.handleOnNewAddressChange = this.handleOnNewAddressChange.bind(this);\n    this.isValidAddress = this.isValidAddress.bind(this);\n    this.handleOnClickWhitelistNewAddress = this.handleOnClickWhitelistNewAddress.bind(this);\n    this.handleOnClickClearNewAddress = this.handleOnClickClearNewAddress.bind(this);\n    this.validateAddress = this.validateAddress.bind(this);\n\n    this.state = { isValidAddress :false, validationState : \"text-warning\" };\n  } // constructor\n\n  handleOnClickWhitelistNewAddress(e)\n  {\n   this.props.handleWhitelistNewAddress( this.newAddress.value );\n   //this.handleOnClickClearNewAddress()\n  } // handleOnClickWhitelistNewAddress\n\n\n  handleOnClickClearNewAddress(e)\n   {\n    this.newAddress.value = ''\n    this.validateAddress(this.newAddress.value)\n   }\n\n  validateAddress(address){\n    const isValidAddress = this.isValidAddress(address)\n    const validationState = this.getValidationState(isValidAddress);\n    this.setState({ isValidAddress, validationState });\n   }\n\n  handleOnNewAddressChange(e) {\n      const addressValue = e.target.value\n      this.validateAddress(addressValue)\n    } // handleOnNewAddressChange\n    \n    isValidAddress(address)\n    {\n      // Eth adddress : 42 chars long including 0x prefix\n      // 0xDC25EF3F5B8A186998338A2ADA83795FBA2D695E\n      const length = address === undefined ? 0 : address.length;\n      if (length === 40 || length === 42)\n      {\n        return isAddress(address)\n      }\n      return false\n    } // isValidAddress\n    \n    getValidationState(isValidAddress) {\n      let res = \"text-warning\"\n      if (isValidAddress)\n      {\n        res = 'text-success';\n      }\n      return res;\n    } // getValidationState\n    \n    render()\n    {\n      const { t } = this.props;\n      return (\n          <div style={{display: 'flex', justifyContent: 'center'}} >\n  \n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>{t(\"votingContract.app.admin.whitelist.whitelistNewAccount\")}</strong></Card.Header>\n            <Card.Body>\n              <Form.Group>\n                <Form.Control type=\"text\" id=\"address\"\n                value={this.state.value}\n                placeholder={t(\"votingContract.app.admin.whitelist.addressPlaceHolder\")} \n                ref={(input) => { this.newAddress = input }}\n                onChange={this.handleOnNewAddressChange}\n                min=\"40\"\n                maxLength=\"42\"\n                className={this.state.validationState}\n                isValid={this.state.isValidAddress}              \n                isInvalid={!this.state.isValidAddress}\n              />\n              </Form.Group>\n            </Card.Body>\n            <Card.Footer>\n            <ListGroup variant=\"flush\">\n              <ListGroup.Item className=\"text-center\">\n                <ButtonGroup aria-label=\"Input address action\">\n                  <Button onClick={ (e) => { this.handleOnClickClearNewAddress() } } variant=\"danger\"> <EraserFill/> </Button>\n                  <Button disabled={!this.state.isValidAddress} onClick={ this.handleOnClickWhitelistNewAddress } variant={this.state.isValidAddress?\"primary\":\"dark\"} > <Check2/> {t(\"votingContract.app.admin.whitelist.whitelist\")} </Button>\n                </ButtonGroup>\n              </ListGroup.Item>\n            </ListGroup>\n            </Card.Footer>\n          </Card>\n          </div>\n      );\n\n    } // render()\n\n } // class AdminInputNewAddress extends Component\n\nconst AdminTranslated = withTranslation()(Admin)\nconst AdminInputNewAddressTranslated = withTranslation()(AdminInputNewAddress)\n\nexport { AdminTranslated };","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n// don't want to use this?\n// have a look at the Quick start guide \n// for passing in lng and translations on init\n\ni18n\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n  // learn more: https://github.com/i18next/i18next-http-backend\n  // want your translations to be loaded from a professional CDN? => https://github.com/locize/react-tutorial#step-2---use-the-locize-cdn\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    fallbackLng: 'en',\n    debug: true,\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    }\n    ,\n    // react i18next special options (optional)\n    react: {\n    useSuspense: false,\n    wait: false,\n  },\n  });\n\n\nexport default i18n;","/* React */\nimport React from \"react\";\n\n/* Traduction */\nimport { useTranslation } from 'react-i18next';\n// Changement de langue\nimport i18n from './i18n';\n\n/* React - Bootstrap*/\nimport Button from 'react-bootstrap/Button';\n\n/* Icônes */\nimport { BootstrapReboot, Flag, FlagFill, Sun, MoonFill, Moon } from 'react-bootstrap-icons';\n\nconst Toolbar = ( {handleReload, owner, connectedAccountAddr} ) =>\n{\n  // handleOnClickReload() = functionReload;\n  const { t } = useTranslation();\n  const changeLanguage = (lng) => {\n    i18n.changeLanguage(lng);\n    }\n\n  return (\n\n  <div className=\"container-fluid \" role=\"toolbar\" aria-label=\"User toolbar\">\n      <div className=\"row\">\n          <div className=\"col-sm-5\">\n              <ReloadButton handleReload={handleReload}/>\n              <Button onClick={() => changeLanguage('fr-FR')} variant=\"primary\" size=\"sm\" > <FlagFill size={14} /> Fr </Button>\n              <Button onClick={() => changeLanguage('en')} variant=\"danger\" size=\"sm\" > <Flag size={14} /> En </Button>\n              <Button variant=\"light \" size=\"sm\" > <Sun size={14} /> </Button>\n              <Button variant=\"light bg-dark \" size=\"sm\" > <MoonFill size={14} /> </Button>\n          </div>\n          <div className=\"col-sm-4 text-sm-left\">\n              <p className={(connectedAccountAddr===owner?\"text-warning\":\"text-info\")+\" fw-bold\"}><small>{t(\"votingContract.app.toolbar.connectedAddr\")} {connectedAccountAddr}</small></p>\n              <p className={\"text-warning\"+(connectedAccountAddr===owner?\" fw-bold\":\"\")}><small>{t(\"votingContract.app.toolbar.ownerAddr\")} {owner}</small></p>\n          </div>\n\n      </div>\n  </div>\n\n  ); // render\n\n} // Toolbar\n\nconst ReloadButton = ({handleReload}) =>\n{\n  const { t } = useTranslation();\n  return (\n      <Button onClick={ handleReload } variant=\"warning\" size=\"sm\" > \n        {t(\"votingContract.app.toolbar.reload\")[0]=='R' &&\n         <BootstrapReboot size={28} style={{verticalAlign: '-35%'}} />\n        }{\" \"+ t(\"votingContract.app.toolbar.reload\").substr(1)}\n      </Button>\n  );\n} // ReloadButton\n\nexport { Toolbar };","/* React */\nimport React from \"react\";\n\n/* Traduction */\nimport { useTranslation } from 'react-i18next';\n\n/* React - Bootstrap*/\nimport Button from 'react-bootstrap/Button';\n\n/* Icônes */\nimport { ArrowRight, EnvelopeOpen, StopCircle } from 'react-bootstrap-icons';\n\n/* Constantes */\nimport  * as CONSTS from \"./consts\";\n\nconst AdminToolbar = ( {workflowStatus, goToNextState, countAndTallyVotes} ) =>\n{\n\n//  const { t } = useTranslation();\n    if ( workflowStatus === CONSTS.STATUSES_VALUES.STATUS_04_VOTINGSESSIONENDED )\n    {\n      return (\n        <CountAndTallyVotesButton countAndTallyVotes={countAndTallyVotes} />\n        )\n    }\n    if ( workflowStatus === CONSTS.STATUSES_VALUES.STATUS_05_VOTESTALLIED )\n    {\n      return (\n        <NoMoreActionAvailable />\n        )\n    }\n\n    return (\n\n      <div className=\"btn-group\" role=\"group\" aria-label=\"Admin toolbar\">\n        <GoToNextStateButton goToNextState={goToNextState} />\n    </div>\n  );\n}\n\nconst GoToNextStateButton = ( {goToNextState} ) =>\n{\n  const { t } = useTranslation();\n\n  return (\n    <Button onClick={goToNextState} variant=\"outline-warning\" >{t(\"votingContract.app.admin.toolbar.nextstate\")} <ArrowRight style={{verticalAlign: '-10%'}} /></Button>\n  );\n}\n\n\nfunction CountAndTallyVotesButton({ countAndTallyVotes })\n{\n  const { t } = useTranslation();\n\n  return (\n    <Button onClick={countAndTallyVotes} variant=\"outline-info\" >{t(\"votingContract.app.admin.toolbar.countAndTallyVotes\")} <EnvelopeOpen style={{verticalAlign: '-10%'}} /></Button>\n  );\n} // CountAndTallyVotesButton\n\nfunction NoMoreActionAvailable({ })\n{\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"text-light\">\n      <StopCircle style={{verticalAlign: '-10%'}} /> {t(\"votingContract.app.admin.action.end\")} <StopCircle style={{verticalAlign: '-10%'}} />\n    </div>\n  );\n}\n\nexport { AdminToolbar /* , X, Y, Z */ };","\nfunction wait(tMillisec)\n{\n const start = Date.now();\n while ( Date.now() - start < tMillisec ) {}\n} \n\n/*\nfunction useToggle (initialValue = true) {\n  const [value, setValue] = useState(initialValue)\n  const toggle = function () {\n      setValue(v => !v)\n  }\n  return [value, toggle]\n}\n\n*/\nfunction zeroPad(num, places) {\n  var zero = places - num.toString().length + 1;\n  return Array(+(zero > 0 && zero)).join(\"0\") + num;\n}\n\nexport { wait, zeroPad };\n","/* React */\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\n/* Traduction */\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n\r\n/* React - Bootstrap*/\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\n/* Utils */\r\nimport  { zeroPad } from \"./AppUtils\";\r\n/* Constantes */\r\nimport  * as CONSTS from \"./consts\";\r\n\r\n/* Icônes */\r\nimport { XCircle, PlusCircle, CheckSquare, HandThumbsUpFill, CheckCircle, Trophy } from 'react-bootstrap-icons';\r\n\r\n\r\n\r\nfunction User( { connectedAccountAddr, workflowStatus, whitelistedAddresses, hasVoted, votedProposalId, allProposals, winningProposalId, onRegisterNewProposal, onVoteForProposal } )\r\n{\r\n  const whitelistedUser = (whitelistedAddresses.indexOf(connectedAccountAddr) != -1)\r\n\r\n  if (whitelistedUser)\r\n   {\r\n\r\n    if ( workflowStatus === CONSTS.STATUSES_VALUES.STATUS_00_REGISTERINGVOTERS )\r\n    {\r\n      return (\r\n        <WhitelistedUserInterfaceWait workflowStatus={workflowStatus} />\r\n        )\r\n    }\r\n\r\n      if ( workflowStatus === CONSTS.STATUSES_VALUES.STATUS_01_PROPOSALSREGISTRATIONSTARTED )\r\n        {\r\n          return (\r\n            <WhitelistedUserProposalsDisplayAndInput connectedAccountAddr={connectedAccountAddr} onRegisterNewProposal={onRegisterNewProposal} allProposals={allProposals} />\r\n            )\r\n        }\r\n\r\n        if ( workflowStatus === CONSTS.STATUSES_VALUES.STATUS_02_PROPOSALSREGISTRATIONENDED )\r\n        {\r\n          return (\r\n            <WhitelistedUserProposalsDisplay connectedAccountAddr={connectedAccountAddr} allProposals={allProposals} />\r\n            )\r\n        }\r\n\r\n        if ( workflowStatus === CONSTS.STATUSES_VALUES.STATUS_03_VOTINGSESSIONSTARTED )\r\n        {\r\n          return (\r\n            <WhitelistedUserVoteForProposal connectedAccountAddr={connectedAccountAddr} onVoteForProposal={onVoteForProposal} allProposals={allProposals} hasVoted={hasVoted} votedProposalId={votedProposalId}/>\r\n            )\r\n        }\r\n        \r\n        if ( workflowStatus === CONSTS.STATUSES_VALUES.STATUS_04_VOTINGSESSIONENDED || workflowStatus === CONSTS.STATUSES_VALUES.STATUS_05_VOTESTALLIED )\r\n        {\r\n          return (\r\n            <WhitelistedUserDisplayVoteProposal connectedAccountAddr={connectedAccountAddr} allProposals={allProposals} hasVoted={hasVoted} votedProposalId={votedProposalId} winningProposalId={winningProposalId} />\r\n            )\r\n        }\r\n        \r\n\r\n   } // whitelistedUser\r\n\r\n   if (workflowStatus === CONSTS.STATUSES_VALUES.STATUS_05_VOTESTALLIED)\r\n   return (\r\n      <NotWhitelistedUserDisplayVoteProposal connectedAccountAddr={connectedAccountAddr} allProposals={allProposals} winningProposalId={winningProposalId} />\r\n    )\r\n\r\n    // Défaut\r\n   return (\r\n    <UnHandled whitelistedUser={whitelistedUser} />\r\n  )\r\n\r\n\r\n} // User\r\n\r\n// ------------------------------------------------------------------------------------------\r\n\r\nfunction WhitelistedUserInterfaceWait({ workflowStatus })\r\n{\r\n  const { t } = useTranslation();\r\n\r\n  if ( workflowStatus === CONSTS.STATUSES_VALUES.STATUS_00_REGISTERINGVOTERS )\r\n  {\r\n    return (\r\n      <div><p className=\"text-warning\">{t(\"votingContract.app.user.action.wait\")} {t(`votingContract.app.dashboard.status.states.${workflowStatus}`)}</p></div>\r\n      )\r\n  }\r\n\r\n} // EmptyUserInterface\r\n\r\n// ------------------------------------------------------------------------------------------\r\n\r\nfunction WhitelistedUserProposalsDisplayAndInput({ connectedAccountAddr, onRegisterNewProposal, allProposals })\r\n{\r\n  return (\r\n    <div>\r\n      <UserProposalsInput connectedAccountAddr={connectedAccountAddr} onRegisterNewProposal={onRegisterNewProposal} allProposals={allProposals} />\r\n    </div>    \r\n  );\r\n} // WhitelistedUserProposalsDisplayAndInput\r\n\r\n// ------------------------------------------------------------------------------------------\r\n\r\nfunction WhitelistedUserProposalsDisplay({ connectedAccountAddr, allProposals })\r\n{\r\n  const { t } = useTranslation();\r\n  // Checkbox\r\n  const [displayAllProposals, toggleDisplayAllProposals] = useToggle( false )\r\n  \r\n  return (\r\n    <div  className=\"container-fluid bg-dark col-sm-4 \">\r\n      <div>\r\n        <h2 className=\"text-center\">\r\n          { ( displayAllProposals ? t(\"votingContract.app.user.proposals.title\") : t(\"votingContract.app.user.proposals.input.title\") ) }\r\n        </h2>\r\n        {t(\"votingContract.app.user.proposals.displayAll\")} <input type=\"checkbox\" onChange={toggleDisplayAllProposals} checked={displayAllProposals}/>\r\n      </div>\r\n      <div>\r\n        <DisplayProposals connectedAccountAddr={connectedAccountAddr} allProposals={allProposals} displayAllProposals={displayAllProposals} />\r\n      </div>\r\n    </div>    \r\n  );\r\n} // WhitelistedUserProposalDisplayAndInput\r\n\r\n\r\n// ------------------------------------------------------------------------------------------\r\n\r\nfunction WhitelistedUserVoteForProposal({ connectedAccountAddr, allProposals, onVoteForProposal, hasVoted, votedProposalId })\r\n{\r\n  const { t } = useTranslation();\r\n  // Checkbox\r\n  const [displayAllProposals, toggleDisplayAllProposals] = useToggle( false )\r\n  \r\n  return (\r\n    <div  className=\"container-fluid bg-dark col-sm-8 \">\r\n      <div>\r\n        <h2 className=\"text-center\">\r\n          { t(\"votingContract.app.user.action.vote\") }\r\n        </h2>\r\n      </div>\r\n      <div>\r\n        <h3 className=\"text-center\">\r\n          { ( displayAllProposals ? t(\"votingContract.app.user.proposals.title\") : t(\"votingContract.app.user.proposals.input.title\") ) }\r\n        </h3>\r\n        {t(\"votingContract.app.user.proposals.displayAll\")} <input type=\"checkbox\" onChange={toggleDisplayAllProposals} checked={displayAllProposals}/>\r\n      </div>\r\n      <div>\r\n        <VoteForProposal connectedAccountAddr={connectedAccountAddr} allProposals={allProposals} onVoteForProposal={onVoteForProposal} displayAllProposals={displayAllProposals} hasVoted={hasVoted} votedProposalId={votedProposalId} />\r\n      </div>\r\n    </div>    \r\n  );\r\n} // WhitelistedUserVoteForProposals\r\n\r\n// ------------------------------------------------------------------------------------------\r\n\r\nfunction WhitelistedUserDisplayVoteProposal({ connectedAccountAddr, allProposals, hasVoted, votedProposalId, winningProposalId })\r\n{\r\n  const { t } = useTranslation();\r\n  // Checkbox\r\n  const [displayAllProposals, toggleDisplayAllProposals] = useToggle( true )\r\n  \r\n  return (\r\n    <div  className=\"container-fluid bg-dark col-sm-8 \">\r\n      <div>\r\n        <h2 className=\"text-center\">\r\n          { t(\"votingContract.app.user.action.result\") }\r\n        </h2>\r\n      </div>\r\n      <div>\r\n        <h3 className=\"text-center\">\r\n          { ( displayAllProposals ? t(\"votingContract.app.user.proposals.title\") : t(\"votingContract.app.user.proposals.input.title\") ) }\r\n        </h3>\r\n        {t(\"votingContract.app.user.proposals.displayAll\")} <input type=\"checkbox\" onChange={toggleDisplayAllProposals} checked={displayAllProposals}/>\r\n      </div>\r\n      <div>\r\n        <DisplayVoteProposal connectedAccountAddr={connectedAccountAddr} allProposals={allProposals} displayAllProposals={displayAllProposals} hasVoted={hasVoted} votedProposalId={votedProposalId} winningProposalId={winningProposalId} />\r\n      </div>\r\n    </div>    \r\n  );\r\n} // WhitelistedUserDisplayVoteProposal\r\n\r\n// ------------------------------------------------------------------------------------------\r\n\r\nfunction NotWhitelistedUserDisplayVoteProposal({ connectedAccountAddr, allProposals, winningProposalId })\r\n{\r\n  const { t } = useTranslation();\r\n  \r\n  return (\r\n    <div  className=\"container-fluid bg-dark col-sm-8 \">\r\n      <div>\r\n        <h2 className=\"text-center\">\r\n          { t(\"votingContract.app.user.action.result\") }\r\n        </h2>\r\n      </div>\r\n      <div>\r\n        <DisplayVoteProposal connectedAccountAddr={connectedAccountAddr} allProposals={allProposals} displayAllProposals={true} winningProposalId={winningProposalId } />\r\n      </div>\r\n    </div>    \r\n  );\r\n} // NotWhitelistedUserDisplayVoteProposal\r\n\r\n// ------------------------------------------------------------------------------------------\r\n\r\nfunction UnHandled({ whitelistedUser })\r\n{\r\n  if ( whitelistedUser )\r\n    {\r\n      return (\r\n        <div>Component :  UnHandled</div>    \r\n      );\r\n    }\r\n    return (\r\n      <NotWhitelistedUser/>\r\n      );\r\n\r\n} // UnHandled\r\n\r\n// ------------------------------------------------------------------------------------------\r\n\r\nfunction NotWhitelistedUser({ /* TODO */ })\r\n{\r\n  return (\r\n    <div>Component :  UnwhitelistedUser</div>    \r\n  );\r\n} // UnwhitelistedUser\r\n\r\n// ------------------------------------------------------------------------------------------\r\n\r\nfunction UserProposalsInput( { connectedAccountAddr, onRegisterNewProposal, allProposals }  )\r\n{\r\n  const { t } = useTranslation();\r\n  const [newProposal, setnewProposal] = useState( \"\" )\r\n\r\n  // Affichage de la ligne de saisie d'une nouvelle proposition\r\n  const [displayNewProposalInput, setDisplayNewProposalInput] = useState( false )\r\n  // Permet l'envoi d'une proposition : bouton actif/inactif\r\n  const [enableButtonSendNewProposal, setEnableButtonSendNewProposal] = useState( false )\r\n\r\n  const myProposals = allProposals.filter((p) => p.proposingAddr === connectedAccountAddr)\r\n\r\n  // Formattage de l'affichage du nombre de proposition : ajout de zéros en préfixe\r\n  const proposalsMaxNumLen = Math.max(myProposals.length.toString().length, 2)\r\n\r\n  const hideResetNewProposalInputs = (resetToEmpty=true ) => {\r\n    setDisplayNewProposalInput(false)\r\n    setEnableButtonSendNewProposal(false)\r\n    if (resetToEmpty) { setnewProposal(\"\") }\r\n  }\r\n\r\n  // Réinitialiser les champs de saisie au changement de compte connecté\r\n  useEffect ( () => {\r\n    hideResetNewProposalInputs()\r\n    }, [connectedAccountAddr]\r\n\r\n  )\r\n \r\nconst registerProposal = async () => {\r\n await onRegisterNewProposal( newProposal )\r\n hideResetNewProposalInputs()\r\n} // registerProposal\r\n\r\nconst handleOnNewProposalChange = (e) => {\r\n// console.log(\"UserProposalInput:handleOnNewProposalChange:e.target.value= '\"+e.target.value+\"'\")\r\n  const value = e.target.value\r\n  setnewProposal(value);\r\n  setEnableButtonSendNewProposal( (value.length > 0 ) )\r\n  } // handleOnNewProposalChange\r\n\r\nconst handleOnClickCancel = (e) => {\r\n  hideResetNewProposalInputs(false)\r\n}\r\n\r\n  const handleOnClickToggleNewProposalVisible = (e) => {\r\n    setDisplayNewProposalInput(v=>!v)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n  { console.log(\"UserProposalInput : Render \") }\r\n<div>\r\n\r\n<div>\r\n    <h2 className=\"text-center\">{t(\"votingContract.app.user.proposals.title\")}</h2>\r\n    <hr></hr>\r\n    <br></br>\r\n</div>\r\n<div style={{display: 'flex', justifyContent: 'center'}}>\r\n  <Card style={{ width: '50rem' }}>\r\n    <Card.Header className=\"text-dark\"><h5 className=\"card-text\">{t(\"votingContract.app.user.proposals.input.title\")}</h5></Card.Header>\r\n    <Card.Body>\r\n      <ListGroup variant=\"flush\">\r\n        <ListGroup.Item>\r\n          <Table className=\"table table-primary table-striped table-hover table-sm-10\">\r\n            <thead className=\"table-dark\">\r\n              <tr>\r\n                <th className=\"col-sm-1 text-center\">{t(\"votingContract.app.user.proposals.input.id\")}</th>\r\n                <th>{t(\"votingContract.app.user.proposals.input.description\")}</th>\r\n                <th className=\"col-sm-4 text-center \">{t(\"votingContract.app.user.proposals.input.action\")}</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n\r\n\r\n              {\r\n                myProposals\r\n                .map((p,i) => <tr key={i}>\r\n                    <td className=\"col-sm-1 text-center\">{zeroPad(i+1,proposalsMaxNumLen)}</td>\r\n                    <td><input value={p.description} readOnly={true} contentEditable={false} size={50} minLength={10} maxLength={100}></input></td>\r\n                    <td/></tr>)\r\n              }\r\n\r\n              { displayNewProposalInput &&\r\n              <tr>\r\n              <td className=\"col-sm-1 text-center text-secondary\">\r\n                <p>{zeroPad(myProposals.length+1,proposalsMaxNumLen)}</p>\r\n              </td>\r\n              <td>\r\n                <input placeholder={t(\"votingContract.app.user.proposals.input.placeholder\")}\r\n                 contentEditable={true} size={50} minLength={10} maxLength={100}\r\n                 onChange={handleOnNewProposalChange}\r\n                 />\r\n              </td>\r\n              <td className=\"col-sm-4 text-right \">\r\n                <span>\r\n                <Button variant=\"info\" size=\"sm\"\r\n                  disabled={!enableButtonSendNewProposal}\r\n                  onClick={registerProposal}> <CheckSquare style={{verticalAlign: '-10%'}} /> {t(\"votingContract.app.user.proposals.input.send\")}\r\n                </Button>\r\n                </span>\r\n                <span>\r\n                  <Button variant=\"warning\" size=\"sm\"\r\n                  onClick={handleOnClickCancel /* setDisplayNewProposalInput */}> <XCircle style={{verticalAlign: '-10%'}} /> {t(\"votingContract.app.user.proposals.input.cancel\")}\r\n                  </Button>\r\n                </span>\r\n              </td>\r\n            </tr>\r\n              }\r\n          </tbody>\r\n\r\n          </Table>\r\n        </ListGroup.Item>\r\n        <ListGroup.Item>\r\n          {\r\n              !displayNewProposalInput &&\r\n          <Button variant=\"dark\" size=\"sm\" onClick={handleOnClickToggleNewProposalVisible}> <PlusCircle size={22} style={{verticalAlign: '-30%'}} /> {t(\"votingContract.app.user.proposals.input.new\")}</Button>\r\n          }\r\n\r\n        </ListGroup.Item>\r\n      </ListGroup>\r\n    </Card.Body>\r\n  </Card>\r\n</div>\r\n<br></br>\r\n\r\n<br></br>\r\n\r\n</div>\r\n    </div>   \r\n  ); // render\r\n} // WhitelistedUser\r\n\r\n\r\n// ------------------------------------------------------------------------------------------\r\n\r\n\r\nfunction DisplayProposals( { connectedAccountAddr, allProposals, displayAllProposals = true }  )\r\n{\r\n  const { t } = useTranslation();\r\n\r\n  const displayedProposals = ( displayAllProposals ? allProposals : allProposals.filter((p) => p.proposingAddr === connectedAccountAddr) )\r\n\r\n  // Formattage de l'affichage du nombre de proposition : ajout de zéros en préfixe\r\n  const proposalsMaxNumLen = Math.max(displayedProposals.length.toString().length, 2)\r\n\r\n  return (\r\n\r\n    <Table className=\"table table-primary table-striped table-hover table-sm\">\r\n    { /*console.log(\"UserProposalInput : Render \") */ }\r\n    <thead className=\"table-dark\">\r\n      <tr>\r\n        <th>{t(\"votingContract.app.user.proposals.input.id\")}</th>\r\n        <th>{t(\"votingContract.app.user.proposals.input.description\")}</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {\r\n        displayedProposals\r\n        .map((p,i) => <tr key={i}><td>{zeroPad(i+1,proposalsMaxNumLen)}</td><td><input value={p.description} readOnly={true} contentEditable={false} size={50} minLength={10} maxLength={100}></input></td></tr>)\r\n      }\r\n    </tbody>\r\n  </Table>\r\n  ); // render\r\n\r\n\r\n} // DisplayProposals\r\n\r\n// ------------------------------------------------------------------------------------------\r\n\r\nfunction VoteForProposal( { connectedAccountAddr, allProposals, onVoteForProposal, displayAllProposals = true, hasVoted, votedProposalId }  )\r\n{\r\n  const { t } = useTranslation();\r\n\r\n  const displayedProposals = ( displayAllProposals ? allProposals : allProposals.filter((p) => p.proposingAddr === connectedAccountAddr) )\r\n\r\n  // Formattage de l'affichage du nombre de proposition : ajout de zéros en préfixe\r\n  const proposalsMaxNumLen = Math.max(displayedProposals.length.toString().length, 2)\r\n\r\n  const handleVoteForProposal = async (  proposalId  ) => {\r\n   // alert(\"handleVoteForProposal\")\r\n    // console.log(proposalId)\r\n    await onVoteForProposal(proposalId)\r\n  } // handleVoteForProposal\r\n\r\n  return (\r\n\r\n    <Table className=\"table table-primary table-striped table-hover table-sm-8\">\r\n    { /*console.log(\"UserProposalInput : Render \") */ }\r\n    <thead className=\"table-dark\">\r\n      <tr>\r\n        <th>{t(\"votingContract.app.user.proposals.input.id\")}</th>\r\n        <th>{!hasVoted?t(\"votingContract.app.user.proposals.input.select\"):t(\"votingContract.app.user.proposals.input.selected\")}</th>\r\n        <th>{t(\"votingContract.app.user.proposals.input.description\")}</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {\r\n        displayedProposals\r\n        .map((p,i) => <tr key={p.id} >\r\n                        <td className=\"col-sm-1 text-center\">{zeroPad(i+1,proposalsMaxNumLen)}</td>\r\n                        <td className=\"col-sm-2\">\r\n                          {\r\n                            !hasVoted &&\r\n                            <Button variant=\"dark\" size=\"sm\"\r\n                            onClick={() => handleVoteForProposal(p.id)}\r\n                          >\r\n                              <HandThumbsUpFill style={{verticalAlign: '-10%'}} /> {t(\"votingContract.app.user.proposals.input.select\")}\r\n                          </Button>\r\n                          }\r\n                          {\r\n                            hasVoted && votedProposalId == p.id &&\r\n                            <CheckCircle style={{verticalAlign: '-10%'}} />\r\n                          }\r\n                        </td>\r\n                        <td>\r\n                            <p className=\"\">{p.description}</p>\r\n                        </td>\r\n                      </tr>)\r\n      }\r\n\r\n    </tbody>\r\n  </Table>\r\n  ); // render\r\n\r\n\r\n} // VoteForProposal\r\n\r\n// ------------------------------------------------------------------------------------------\r\n\r\nfunction DisplayVoteProposal( { connectedAccountAddr, allProposals, displayAllProposals = true, hasVoted, votedProposalId, winningProposalId }  )\r\n{\r\n  const { t } = useTranslation();\r\n  const displayedProposals = ( displayAllProposals ? allProposals : allProposals.filter((p) => p.proposingAddr === connectedAccountAddr) )\r\n  // Formattage de l'affichage du nombre de proposition : ajout de zéros en préfixe\r\n  const proposalsMaxNumLen = Math.max(displayedProposals.length.toString().length, 2)\r\n\r\n  return (\r\n    <Table className=\"table table-primary table-striped table-hover table-sm-8\">\r\n    <thead className=\"table-dark\">\r\n      <tr>\r\n        <th>{t(\"votingContract.app.user.proposals.input.id\")}</th>\r\n        <th>{t(\"votingContract.app.user.proposals.input.results\")}</th>\r\n        <th>{t(\"votingContract.app.user.proposals.input.description\")}</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {\r\n        displayedProposals\r\n        .map((p,i) => <tr key={p.id} className={winningProposalId == p.id ? 'table-success': hasVoted && votedProposalId == p.id ? 'table-info':'' }>\r\n                        <td className=\"col-sm-1 text-center\"><p className={winningProposalId == p.id ?\"fw-bold\":\"\"}>{zeroPad(i+1,proposalsMaxNumLen)}</p></td>\r\n                        <td className=\"col-sm-2\">\r\n                          {\r\n                            hasVoted && votedProposalId == p.id &&\r\n                            <CheckCircle style={{verticalAlign: '-10%'}} />\r\n                          }\r\n                          {\r\n                             winningProposalId == p.id &&\r\n                            <Trophy style={{verticalAlign: '-10%'}} />\r\n                          }\r\n                        </td>\r\n                        <td>\r\n                          <p className={winningProposalId == p.id ?\"fw-bold\":\"\"}>{p.description}</p>\r\n                        </td>\r\n                      </tr>)\r\n      }\r\n    </tbody>\r\n  </Table>\r\n\r\n  ); // render\r\n\r\n} // DisplayVoteProposal\r\n\r\n// ------------------------------------------------------------------------------------------\r\n\r\nfunction useToggle (initialValue = true) {\r\n  const [value, setValue] = useState(initialValue)\r\n  const toggle = function () {\r\n      setValue(v => !v)\r\n  }\r\n  return [value, toggle]\r\n}\r\n\r\n// ------------------------------------------------------------------------------------------\r\n\r\nexport { User };","import React, { Component } from \"react\";\n\n/* Traduction */\nimport { withTranslation /*, useTranslation */ } from 'react-i18next';\n\n/* Bootstrap */\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// Interface du smartcontract\nimport contractVotingImport from \"./contracts/Voting_03.json\";\n\n/* Utils Web3 */\nimport { getWeb3, toChecksumAddress /*, isAddress*/ } from \"./getWeb3\";\n\n/* Composants React */\nimport  { Web3Loader, StatusTranslated } from \"./AppComponents-Status\";\nimport  { AdminTranslated } from \"./AppComponents-Admin\";\nimport  { Toolbar } from \"./AppComponents-Header\";\nimport  { AdminToolbar } from \"./AppComponents-Admin-Header\";\nimport  { User } from \"./AppComponents-User\";\n\n/* Constantes */\nimport  * as CONSTS from \"./consts\";\n\n/* CSS spécifique pour la barre de progression */\nimport \"./App.css\";\n\n/*\n// //////////////////////////////////////////////////////////////////////////////////////////\n*/\nclass MainApp extends Component\n{\n  constructor(props) {\n    super(props);\n\n    // Etats\n    this.states=[\n      CONSTS.STATUSES_VALUES.STATUS_00_REGISTERINGVOTERS,\n      CONSTS.STATUSES_VALUES.STATUS_01_PROPOSALSREGISTRATIONSTARTED,\n      CONSTS.STATUSES_VALUES.STATUS_02_PROPOSALSREGISTRATIONENDED,\n      CONSTS.STATUSES_VALUES.STATUS_03_VOTINGSESSIONSTARTED,\n      CONSTS.STATUSES_VALUES.STATUS_04_VOTINGSESSIONENDED,\n      CONSTS.STATUSES_VALUES.STATUS_05_VOTESTALLIED\n      ];\n\n    /* Handlers */\n    this.whitelistNewAddress = this.whitelistNewAddress.bind(this);\n    this.registerProposal = this.registerProposal.bind(this);\n  }\n  \n  /* Variables globales du composant principal */\n  state = {\n    web3: null,\n    connectedAccountAddr: null,\n    whitelistedAddresses: [],\n    contractVoting: null ,\n    ethereum : null,\n    owner: null,\n    allProposals: null,\n    winningProposalId: null\n  };\n\n  // ----------------------------\n  \n  render()\n   {\n    const { workflowStatus, whitelistedAddresses, allProposals, hasVoted, votedProposalId, winningProposalId } = this.state;\n\n    if (!this.state.web3) {\n      return (\n       <Web3Loader/>\n      )\n    }\n    return (\n        /* Début : 0 conteneur de Toute l'App */\n        <div className=\"container-fluid \"> \n          {/* Début : 1.0 conteneur LIGNE de l'entête */}\n          <div className=\"row \">\n            {/* Début : 1.1 entête */}\n            <div className=\"container-fluid \">\n              {/* Début : 1.1.1 barre de progression */}\n              <div className=\"row bg-dark\">\n                    <div className=\"container-fluid col-sm-12 col-md-12 col-lg-12\">\n                    <Toolbar handleReload={this.handleReload} owner={this.state.owner} connectedAccountAddr={this.state.connectedAccountAddr} hasVoted={hasVoted} />\n                    </div>\n              </div>\n              <div className=\"row bg-dark\">\n                <br/>\n              </div>\n              { this.state.connectedAccountAddr === this.state.owner &&\n                  <div className=\"row bg-dark\">\n                        <div className=\"container-fluid col-sm-12 col-md-12 col-lg-12\">\n                        <AdminToolbar workflowStatus={workflowStatus} goToNextState={this.goToNextState} countAndTallyVotes={this.countAndTallyVotes}/>\n                        </div>\n                  </div>\n              }\n              <div className=\"row bg-dark\">\n                <br/>\n              </div>\n              <div className=\"row bg-dark\">\n                    <div className=\"container-fluid col-sm-12 col-md-12 col-lg-12\">\n                    <StatusTranslated displayType={\"ProgressBar\"} states={this.states} workflowStatus={workflowStatus} />\n                    </div>\n              </div>\n              {/* Fin : 1.1.1 barre de progression */}\n            </div>\n            {/* Fin : 1.1 entête */}\n          </div>\n          {/* Fin : 1.0 conteneur LIGNE de l'entête */}\n\n\n          {/* Début : 2.0 conteneur LIGNE du contenu de l'App */}\n          <div className=\"row bg-warning\">\n\n            {/* Début : 2.1 conteneur du contenu de l'App */}\n            <div className=\"container-fluid bg-dark\">\n\n              {/* Début : 2.1.1 conteneur LIGNE de la première ligne de contenu de l'App */}\n              {/*<div className=\"row \">*/}\n\n\n                 \n                {/* Début : <div className=\"container-fluid p-3\"> */}\n                <div className=\"container-fluid p-3\">\n\n                  {/* Début : 2.1.1.1 conteneur de la première ligne de contenu de l'App */}\n                  <div className=\"row bg-dark border border-5 border-white text-light\">\n                    <div className=\"container \">\n                    \n                       { this.state.connectedAccountAddr === this.state.owner &&\n                         <AdminTranslated owner={this.state.owner} whitelistedAddresses={whitelistedAddresses} handleWhitelistNewAddress={this.whitelistNewAddress} connectedAccountAddr={this.state.connectedAccountAddr} workflowStatus={workflowStatus}/>\n                       }\n                    </div>\n\n                  </div>\n\n                  {/* Début : 2.1.1.2 conteneur de la deuxième ligne de contenu de l'App */}\n                  <div className=\"row bg-dark border border-5 border-white text-light\">\n                    <div className=\"container \">\n\n                       <User connectedAccountAddr={this.state.connectedAccountAddr} workflowStatus={workflowStatus} whitelistedAddresses={whitelistedAddresses} hasVoted={hasVoted} votedProposalId={votedProposalId} winningProposalId={winningProposalId} onRegisterNewProposal={this.registerProposal} allProposals={allProposals} onVoteForProposal={this.voteForProposal} />\n\n                    </div>\n\n                  </div>\n\n                </div>\n                {/* Fin : <div className=\"container-fluid p-3\"> */}\n\n              {/*</div>*/}\n              {/* Fin : 2.1.1 conteneur LIGNE de la première ligne de contenu de l'App */}\n\n            </div>\n            {/* Fin : 2.1 conteneur du contenu de l'App */}\n\n          </div>\n          {/* Fin : 2.0 conteneur LIGNE du contenu de l'App */}\n\n          {/* Début : 3.0 conteneur du bas de l'App */}\n          <div className=\"row bg-secondary\">\n            \n          </div>\n          {/* Fin : 3.0 conteneur du bas de l'App */}\n\n\n        </div>\n        /* Fin : 0 conteneur de Toute l'App */\n\n        );\n\n  } // render()\n\n/* ****************************\n  handleAccountsChangedEvent\n  ! accounts :\n  pour les adresses renvoyées par l'évènement window.ethereum.on(\"accountsChanged\" ...\n  la casse est en minuscules (version sans checksum : ex. 0x627306090abab3a6e1400e9345bc60c78a8bef57 au lieu de 0x627306090abaB3A6e1400e9345bC60c78a8BEf57)\n *****************************/\nhandleAccountsChangedEvent = (accounts) => {\n  this.refreshContractVotingData()\n  this.refreshUserAccount()\n};\n\n/******************************\n  get_workflowStatus\n\n/*****************************/\nget_workflowStatus = async (contractVoting) =>\n {\n  let val = await contractVoting.methods._workflowStatus().call()\n  const workflowStatus_current_val = parseInt( val, 10 )\n  return workflowStatus_current_val\n }\n\n /******************************\n  GoToNextState\n/*****************************/\n  goToNextState = async () => {\n    try\n     {\n      const { connectedAccountAddr, contractVoting } = this.state;\n      const workflowStatus_current_val = await this.get_workflowStatus(contractVoting)\n\n      switch (workflowStatus_current_val) {\n        case 0: // RegisteringVoters -> ProposalsRegistrationStarted\n          await contractVoting.methods.setStateStartProposalsRegistration().send({from: connectedAccountAddr});\n        break;\n\n        case 1: // ProposalsRegistrationStarted -> ProposalsRegistrationEnded\n          await contractVoting.methods.setStateEndProposalsRegistration().send({from: connectedAccountAddr});\n        break;\n\n        case 2: // ProposalsRegistrationEnded -> VotingSessionStarted\n          await contractVoting.methods.setStateStartVotingSession().send({from: connectedAccountAddr});\n        break;\n\n        case 3: // VotingSessionStarted -> VotingSessionEnded\n          await contractVoting.methods.setStateEndVotingSession().send({from: connectedAccountAddr});\n        break;\n\n        // setStateVotesTallied n'est pas appelable directement : méthode internal appelée par countAndTallyVotes\n        case 4: // votingSessionEnded -> VotesTallied\n        // await contractVoting.methods.setStateVotesTallied().send({from: connectedAccountAddr});\n        // break;\n\n        case 5: // VotesTallied\n          default:\n        break;\n      }\n\n      const workflowStatus_new = await this.get_workflowStatus(contractVoting)\n      const winningProposalId = await this.getWinningProposalId(workflowStatus_new)\n\n      this.setState({ workflowStatus: workflowStatus_new, winningProposalId });\n    }\n    catch (error)\n     {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n     }\n  }; // componentDidMount\n  \n\n/* ****************************\n  componentDidMount\n *****************************/\n\ncomponentDidMount = async () => {\n  try\n   {\n    // Get network provider and web3 instance.\n    const web3 = await getWeb3();\n\n    // Use web3 to get the user's accounts.\n    const connectedAccountsAddrs = await web3.eth.getAccounts();\n    const connectedAccountAddr = toChecksumAddress(connectedAccountsAddrs[0])\n\n    // Get the contract instance.\n    const networkId = await web3.eth.net.getId();\n    const contractVoting_deployedNetwork = contractVotingImport.networks[networkId];\n\n    const contractInstanceVoting = new web3.eth.Contract(\n      contractVotingImport.abi,\n      contractVoting_deployedNetwork && contractVoting_deployedNetwork.address,\n    );\n\n    this.setState({ web3, connectedAccountAddr, contractVoting: contractInstanceVoting, ethereum: window.ethereum }, this.runInit );\n\n    // Mise en place du handler pour l'évènement -> changement de compte\n    window.ethereum.on(\"accountsChanged\", accounts =>\n     {\n      this.handleAccountsChangedEvent(accounts)\n      });\n\n   }\n  catch (error)\n   {\n    // Catch any errors for any of the above operations.\n    alert(\n      `Failed to load web3, accounts, or contract. Check console for details.`,\n    );\n    console.error(error);\n   }\n}; // componentDidMount\n\n\n/* ****************************\n  runInit\n *****************************/\n\nrunInit = async() => {\n  await this.refreshContractVotingData()\n  await this.refreshUserAccount() \n} // runInit\n\n\n/* ****************************\n  refreshContractVotingData\n *****************************/\n  refreshContractVotingData = async() => {\n\n  const { contractVoting } = this.state;\n  // récupérer la liste des comptes autorisés\n  const whitelistedAddresses = await contractVoting.methods.getWhiteListedAddresses().call();\n  // Etat du contrat\n  const workflowStatus = await this.get_workflowStatus(contractVoting)\n  // Gestionnaire\n  const owner = await contractVoting.methods.owner().call();\n  // Liste des propositions\n  const allProposals = await this.getAllProposals()\n  // Proposition gagnante\n  const winningProposalId = await this.getWinningProposalId(workflowStatus)\n\n  // Mise à jour de tous les states en une fois\n   this.setState({ whitelistedAddresses, workflowStatus, owner, allProposals, winningProposalId });\n\n  } // refreshContractVotingData\n  \n  \n/* -------------------------------------------------------------\n  whitelistNewAddress\n   Interaction avec le smart contract pour ajouter un compte \n   ------------------------------------------------------------- */\n  whitelistNewAddress = async(address) => {\n    const { connectedAccountAddr, contractVoting } = this.state;\n    await contractVoting.methods.whitelist(address).send({from: connectedAccountAddr});\n    // Mettre à jour les données du contrat\n    await this.refreshContractVotingData()\n  } // whitelistNewAddress\n\n\n/* -------------------------------------------------------------\n          handleReload\n   ------------------------------------------------------------- */\n  // handleReload()\n  handleReload = async() => {\n      this.refreshUserAccount()\n    }\n      \n/* -------------------------------------------------------------\n      refreshUserAccount\n   ------------------------------------------------------------- */\nrefreshUserAccount = async() => {\n  try\n   {\n    const { web3 } = this.state\n    // Use web3 to get the user's accounts.\n    // Mise à jour des données de l'utilisateur connecté\n    const connectedAccountsAddrs = await web3.eth.getAccounts();\n    const connectedAccountAddr = toChecksumAddress(connectedAccountsAddrs[0])\n    const userVote = await this.getUserVote( connectedAccountAddr )\n    const hasVoted = userVote[0]\n    const votedProposalId = userVote[1]\n\n    this.setState( { connectedAccountAddr, hasVoted, votedProposalId } )\n\n   } // try\n  catch (error)\n   {\n    // Catch any errors for any of the above operations.\n    alert(\n      `Failed to load web3, accounts, or contract. Check console for details.`,\n    );\n    console.error(error);\n   } // catch\n}; // refreshUserAccount\n\n\n/* ****************************\n  getUserVote\n *****************************/\n  getUserVote = async( connectedAccountAddr ) => {\n    const { workflowStatus, contractVoting } = this.state;\n    const res = ( workflowStatus >= CONSTS.STATUSES_VALUES.STATUS_03_VOTINGSESSIONSTARTED ? await contractVoting.methods.hasVoted(connectedAccountAddr).call() : [false, 0] )\n    return res\n  } // getUserVote\n\n/* ****************************\n  getAllProposals\n *****************************/\n  getAllProposals = async() => {\n    const { contractVoting } = this.state;\n    const proposals = await contractVoting.methods.getAllProposals().call();\n    let proposalsObjectsArray= [];\n     \n    for (let proposalId=0;proposalId<proposals.length;proposalId++)\n      {\n        let proposal = {};\n        proposal.id = proposalId; // id\n        proposal.description = proposals[proposalId][0]; // string description\n        proposal.voteCount = proposals[proposalId][1]; // uint voteCount\n        proposal.proposingAddr = proposals[proposalId][2]; // address proposing\n\n        proposalsObjectsArray.push(proposal)\n    } // for\n      return proposalsObjectsArray;\n  } // getAllProposals\n\n\n/* ****************************\n  registerProposal\n  *****************************/\n  registerProposal = async(description) =>\n  {\n   const { connectedAccountAddr, contractVoting } = this.state;   \n    // Interaction avec le smart contract pour ajouter une proposition\n    await contractVoting.methods.registerProposal(description).send({from: connectedAccountAddr});\n    // Recharger les propositions\n    const allProposals = await this.getAllProposals()\n    this.setState({ allProposals });\n  } // registerProposal\n\n/* ****************************\n  voteForProposal\n  *****************************/\n  voteForProposal = async(proposalId) => {\n    const { connectedAccountAddr, contractVoting } = this.state;\n    // Interaction avec le smart contract pour voter pour une proposition\n    await contractVoting.methods.vote(proposalId).send({from: connectedAccountAddr});\n\n    const userVote = await this.getUserVote( connectedAccountAddr )\n    const hasVoted = userVote[0]\n    const votedProposalId = userVote[1]\n\n    this.setState( { hasVoted, votedProposalId } )\n   \n  } // registerProposal\n\n/* ****************************\n  getWinningProposalId\n *****************************/\n  getWinningProposalId = async(workflowStatus) => {\n    const { contractVoting } = this.state;\n    // Interaction avec le smart contract pour compter les votes dès les session de vote fermée et AVANT le décompte : méthode VIEW\n    // permet le comptage qq. soit le nombre votes SANS transaction\n    const winningProposalId = ( workflowStatus === CONSTS.STATUSES_VALUES.STATUS_04_VOTINGSESSIONENDED ? await contractVoting.methods.countVotes().call() : ( workflowStatus === CONSTS.STATUSES_VALUES.STATUS_05_VOTESTALLIED ? await contractVoting.methods.getWinningProposal().call() : -1 ) )\n    return winningProposalId\n  } // getWinningProposalId\n\n  /* ****************************\n  countAndTallyVotes\n *****************************/\n  countAndTallyVotes = async() => {\n    const { connectedAccountAddr, contractVoting } = this.state;\n    // Interaction avec le smart contract pour décompter les votes et écrire le résultat on chain\n    // permet le décomptage qq. soit le nombre votes AVEC transaction\n    // Appel seulement autorisé pour le PROPRIETAIRE du contrat\n    const winningProposalId = await contractVoting.methods.countAndTallyVotes().send({from: connectedAccountAddr});\n    \n    this.setState( { winningProposalId } )\n    \n    return winningProposalId\n  } // countAndTallyVotes\n\n\n// //////////////////////////////////////////////////////////////////////////////////////////\n\n} // class MainApp extends Component\n\n\nconst MainAppTranslated = withTranslation()(MainApp);\n\nexport default MainAppTranslated;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n// import React, { Component } from \"react\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport {I18nextProvider} from \"react-i18next\";\nimport i18next from \"i18next\";\n\n//import App from './App';\nimport MainAppTranslated from './MainApp';\n\nimport * as serviceWorker from './serviceWorker';\n\n// import i18n (needs to be bundled ;)) \nimport './i18n';\n\n// ReactDOM.render(<MainApp />, document.getElementById('root'));\n\nReactDOM.render(\n  <React.StrictMode>\n      <I18nextProvider i18n={i18next}>\n          <MainAppTranslated/>\n      </I18nextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// window.ethereum.on('accountsChanged', function (accounts) {\n//   // Time to reload your interface with accounts[0]!\n// console.log(\"accountsChanged\")\n// ReactDOM.render(\n//   <React.StrictMode>\n//       <I18nextProvider i18n={i18next}>\n//           <MainAppTranslated/>\n//       </I18nextProvider>\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n// })\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}